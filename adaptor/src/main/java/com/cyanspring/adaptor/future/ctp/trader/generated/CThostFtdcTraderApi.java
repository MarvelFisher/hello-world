package com.cyanspring.adaptor.future.ctp.trader.generated;
import com.cyanspring.adaptor.future.ctp.trader.generated.TraderLibrary.THOST_TE_RESUME_TYPE;

import org.bridj.BridJ;
import org.bridj.IntValuedEnum;
import org.bridj.Pointer;
import org.bridj.ann.Library;
import org.bridj.ann.Name;
import org.bridj.ann.Ptr;
import org.bridj.ann.Virtual;
import org.bridj.cpp.CPPObject;
/**
 * <i>native declaration : ThostFtdcTraderApi.h:340</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("Trader") 
public class CThostFtdcTraderApi extends CPPObject {
	static {
		BridJ.register();
	}
	
	/**
	 * ///创建TraderApi
	 * ///@param pszFlowPath 存贮订阅信息文件的目录，默认为当前目录
	 * ///@return 创建出的UserApi
	 */
	public static Pointer<CThostFtdcTraderApi > CreateFtdcTraderApi(Pointer<Byte > pszFlowPath) {
		return (Pointer)Pointer.pointerToAddress(CreateFtdcTraderApi(Pointer.getPeer(pszFlowPath)), CThostFtdcTraderApi.class);
	}
	@Ptr 
	protected native static long CreateFtdcTraderApi(@Ptr long pszFlowPath);
	
	/**
	 * ///获取API的版本信息
	 * ///@retrun 获取到的版本号
	 */
	public static Pointer<Byte > GetApiVersion() {
		return (Pointer)Pointer.pointerToAddress(GetApiVersion$2(), Byte.class);
	}
	@Ptr 
	@Name("GetApiVersion") 
	protected native static long GetApiVersion$2();
	
	/**
	 * ///删除接口对象本身
	 * ///@remark 不再使用本接口对象时,调用该函数删除接口对象
	 */
	@Virtual(0) 
	public native void Release();
	
	/**
	 * ///初始化
	 * ///@remark 初始化运行环境,只有调用后,接口才开始工作
	 */
	@Virtual(1) 
	public native void Init();
	
	/**
	 * ///等待接口线程结束运行
	 * ///@return 线程退出代码
	 */
	@Virtual(2) 
	public native int Join();
	
	/**
	 * ///获取当前交易日
	 * ///@retrun 获取到的交易日
	 * ///@remark 只有登录成功后,才能得到正确的交易日
	 */
	@Virtual(3) 
	public Pointer<Byte > GetTradingDay() {
		return (Pointer)Pointer.pointerToAddress(GetTradingDay$2(), Byte.class);
	}
	@Ptr 
	@Name("GetTradingDay") 
	@Virtual(3) 
	protected native long GetTradingDay$2();
	
	/**
	 * ///注册前置机网络地址
	 * ///@param pszFrontAddress：前置机网络地址。
	 * ///@remark 网络地址的格式为：“protocol://ipaddress:port”，如：”tcp://127.0.0.1:17001”。 
	 * ///@remark “tcp”代表传输协议，“127.0.0.1”代表服务器地址。”17001”代表服务器端口号。
	 */
	@Virtual(4) 
	public void RegisterFront(Pointer<Byte > pszFrontAddress) {
		RegisterFront(Pointer.getPeer(pszFrontAddress));
	}
	@Virtual(4) 
	protected native void RegisterFront(@Ptr long pszFrontAddress);
	
	/**
	 * ///注册名字服务器网络地址
	 * ///@param pszNsAddress：名字服务器网络地址。
	 * ///@remark 网络地址的格式为：“protocol://ipaddress:port”，如：”tcp://127.0.0.1:12001”。 
	 * ///@remark “tcp”代表传输协议，“127.0.0.1”代表服务器地址。”12001”代表服务器端口号。
	 * ///@remark RegisterNameServer优先于RegisterFront
	 */
	@Virtual(5) 
	public void RegisterNameServer(Pointer<Byte > pszNsAddress) {
		RegisterNameServer(Pointer.getPeer(pszNsAddress));
	}
	@Virtual(5) 
	protected native void RegisterNameServer(@Ptr long pszNsAddress);
	
	/**
	 * ///注册名字服务器用户信息
	 * ///@param pFensUserInfo：用户信息。
	 */
	@Virtual(6) 
	public void RegisterFensUserInfo(Pointer<CThostFtdcFensUserInfoField > pFensUserInfo) {
		RegisterFensUserInfo(Pointer.getPeer(pFensUserInfo));
	}
	@Virtual(6) 
	protected native void RegisterFensUserInfo(@Ptr long pFensUserInfo);
	
	/**
	 * ///注册回调接口
	 * ///@param pSpi 派生自回调接口类的实例
	 */
	@Virtual(7) 
	public void RegisterSpi(Pointer<? extends CThostFtdcTraderSpi > pSpi) {
		RegisterSpi(Pointer.getPeer(pSpi));
	}
	@Virtual(7) 
	protected native void RegisterSpi(@Ptr long pSpi);
	
	/**
	 * ///订阅私有流。
	 * ///@param nResumeType 私有流重传方式  
	 * ///        THOST_TERT_RESTART:从本交易日开始重传
	 * ///        THOST_TERT_RESUME:从上次收到的续传
	 * ///        THOST_TERT_QUICK:只传送登录后私有流的内容
	 * ///@remark 该方法要在Init方法前调用。若不调用则不会收到私有流的数据。
	 */
	@Virtual(8) 
	public void SubscribePrivateTopic(IntValuedEnum<THOST_TE_RESUME_TYPE > nResumeType) {
		SubscribePrivateTopic((int)nResumeType.value());
	}
	@Virtual(8) 
	protected native void SubscribePrivateTopic(int nResumeType);
	
	/**
	 * ///订阅公共流。
	 * ///@param nResumeType 公共流重传方式  
	 * ///        THOST_TERT_RESTART:从本交易日开始重传
	 * ///        THOST_TERT_RESUME:从上次收到的续传
	 * ///        THOST_TERT_QUICK:只传送登录后公共流的内容
	 * ///@remark 该方法要在Init方法前调用。若不调用则不会收到公共流的数据。
	 */
	@Virtual(9) 
	public void SubscribePublicTopic(IntValuedEnum<THOST_TE_RESUME_TYPE > nResumeType) {
		SubscribePublicTopic((int)nResumeType.value());
	}
	@Virtual(9) 
	protected native void SubscribePublicTopic(int nResumeType);
	
	/**
	 * ///客户端认证请求
	 */
	@Virtual(10) 
	public int ReqAuthenticate(Pointer<CThostFtdcReqAuthenticateField > pReqAuthenticateField, int nRequestID) {
		return ReqAuthenticate(Pointer.getPeer(pReqAuthenticateField), nRequestID);
	}
	@Virtual(10) 
	protected native int ReqAuthenticate(@Ptr long pReqAuthenticateField, int nRequestID);
	
	/**
	 * ///用户登录请求
	 */
	@Virtual(11) 
	public int ReqUserLogin(Pointer<CThostFtdcReqUserLoginField > pReqUserLoginField, int nRequestID) {
		return ReqUserLogin(Pointer.getPeer(pReqUserLoginField), nRequestID);
	}
	@Virtual(11) 
	protected native int ReqUserLogin(@Ptr long pReqUserLoginField, int nRequestID);
	
	/**
	 * ///登出请求
	 */
	@Virtual(12) 
	public int ReqUserLogout(Pointer<CThostFtdcUserLogoutField > pUserLogout, int nRequestID) {
		return ReqUserLogout(Pointer.getPeer(pUserLogout), nRequestID);
	}
	@Virtual(12) 
	protected native int ReqUserLogout(@Ptr long pUserLogout, int nRequestID);
	
	/**
	 * ///用户口令更新请求
	 */
	@Virtual(13) 
	public int ReqUserPasswordUpdate(Pointer<CThostFtdcUserPasswordUpdateField > pUserPasswordUpdate, int nRequestID) {
		return ReqUserPasswordUpdate(Pointer.getPeer(pUserPasswordUpdate), nRequestID);
	}
	@Virtual(13) 
	protected native int ReqUserPasswordUpdate(@Ptr long pUserPasswordUpdate, int nRequestID);
	
	/**
	 * ///资金账户口令更新请求
	 */
	@Virtual(14) 
	public int ReqTradingAccountPasswordUpdate(Pointer<CThostFtdcTradingAccountPasswordUpdateField > pTradingAccountPasswordUpdate, int nRequestID) {
		return ReqTradingAccountPasswordUpdate(Pointer.getPeer(pTradingAccountPasswordUpdate), nRequestID);
	}
	@Virtual(14) 
	protected native int ReqTradingAccountPasswordUpdate(@Ptr long pTradingAccountPasswordUpdate, int nRequestID);
	
	/**
	 * ///报单录入请求
	 */
	@Virtual(15) 
	public int ReqOrderInsert(Pointer<CThostFtdcInputOrderField > pInputOrder, int nRequestID) {
		return ReqOrderInsert(Pointer.getPeer(pInputOrder), nRequestID);
	}
	@Virtual(15) 
	protected native int ReqOrderInsert(@Ptr long pInputOrder, int nRequestID);
	
	/**
	 * ///预埋单录入请求
	 */
	@Virtual(16) 
	public int ReqParkedOrderInsert(Pointer<CThostFtdcParkedOrderField > pParkedOrder, int nRequestID) {
		return ReqParkedOrderInsert(Pointer.getPeer(pParkedOrder), nRequestID);
	}
	@Virtual(16) 
	protected native int ReqParkedOrderInsert(@Ptr long pParkedOrder, int nRequestID);
	
	/**
	 * ///预埋撤单录入请求
	 */
	@Virtual(17) 
	public int ReqParkedOrderAction(Pointer<CThostFtdcParkedOrderActionField > pParkedOrderAction, int nRequestID) {
		return ReqParkedOrderAction(Pointer.getPeer(pParkedOrderAction), nRequestID);
	}
	@Virtual(17) 
	protected native int ReqParkedOrderAction(@Ptr long pParkedOrderAction, int nRequestID);
	
	/**
	 * ///报单操作请求
	 */
	@Virtual(18) 
	public int ReqOrderAction(Pointer<CThostFtdcInputOrderActionField > pInputOrderAction, int nRequestID) {
		return ReqOrderAction(Pointer.getPeer(pInputOrderAction), nRequestID);
	}
	@Virtual(18) 
	protected native int ReqOrderAction(@Ptr long pInputOrderAction, int nRequestID);
	
	/**
	 * ///查询最大报单数量请求
	 */
	@Virtual(19) 
	public int ReqQueryMaxOrderVolume(Pointer<CThostFtdcQueryMaxOrderVolumeField > pQueryMaxOrderVolume, int nRequestID) {
		return ReqQueryMaxOrderVolume(Pointer.getPeer(pQueryMaxOrderVolume), nRequestID);
	}
	@Virtual(19) 
	protected native int ReqQueryMaxOrderVolume(@Ptr long pQueryMaxOrderVolume, int nRequestID);
	
	/**
	 * ///投资者结算结果确认
	 */
	@Virtual(20) 
	public int ReqSettlementInfoConfirm(Pointer<CThostFtdcSettlementInfoConfirmField > pSettlementInfoConfirm, int nRequestID) {
		return ReqSettlementInfoConfirm(Pointer.getPeer(pSettlementInfoConfirm), nRequestID);
	}
	@Virtual(20) 
	protected native int ReqSettlementInfoConfirm(@Ptr long pSettlementInfoConfirm, int nRequestID);
	
	/**
	 * ///请求删除预埋单
	 */
	@Virtual(21) 
	public int ReqRemoveParkedOrder(Pointer<CThostFtdcRemoveParkedOrderField > pRemoveParkedOrder, int nRequestID) {
		return ReqRemoveParkedOrder(Pointer.getPeer(pRemoveParkedOrder), nRequestID);
	}
	@Virtual(21) 
	protected native int ReqRemoveParkedOrder(@Ptr long pRemoveParkedOrder, int nRequestID);
	
	/**
	 * ///请求删除预埋撤单
	 */
	@Virtual(22) 
	public int ReqRemoveParkedOrderAction(Pointer<CThostFtdcRemoveParkedOrderActionField > pRemoveParkedOrderAction, int nRequestID) {
		return ReqRemoveParkedOrderAction(Pointer.getPeer(pRemoveParkedOrderAction), nRequestID);
	}
	@Virtual(22) 
	protected native int ReqRemoveParkedOrderAction(@Ptr long pRemoveParkedOrderAction, int nRequestID);
	
	/**
	 * ///执行宣告录入请求
	 */
	@Virtual(23) 
	public int ReqExecOrderInsert(Pointer<CThostFtdcInputExecOrderField > pInputExecOrder, int nRequestID) {
		return ReqExecOrderInsert(Pointer.getPeer(pInputExecOrder), nRequestID);
	}
	@Virtual(23) 
	protected native int ReqExecOrderInsert(@Ptr long pInputExecOrder, int nRequestID);
	
	/**
	 * ///执行宣告操作请求
	 */
	@Virtual(24) 
	public int ReqExecOrderAction(Pointer<CThostFtdcInputExecOrderActionField > pInputExecOrderAction, int nRequestID) {
		return ReqExecOrderAction(Pointer.getPeer(pInputExecOrderAction), nRequestID);
	}
	@Virtual(24) 
	protected native int ReqExecOrderAction(@Ptr long pInputExecOrderAction, int nRequestID);
	
	/**
	 * ///询价录入请求
	 */
	@Virtual(25) 
	public int ReqForQuoteInsert(Pointer<CThostFtdcInputForQuoteField > pInputForQuote, int nRequestID) {
		return ReqForQuoteInsert(Pointer.getPeer(pInputForQuote), nRequestID);
	}
	@Virtual(25) 
	protected native int ReqForQuoteInsert(@Ptr long pInputForQuote, int nRequestID);
	
	/**
	 * ///报价录入请求
	 */
	@Virtual(26) 
	public int ReqQuoteInsert(Pointer<CThostFtdcInputQuoteField > pInputQuote, int nRequestID) {
		return ReqQuoteInsert(Pointer.getPeer(pInputQuote), nRequestID);
	}
	@Virtual(26) 
	protected native int ReqQuoteInsert(@Ptr long pInputQuote, int nRequestID);
	
	/**
	 * ///报价操作请求
	 */
	@Virtual(27) 
	public int ReqQuoteAction(Pointer<CThostFtdcInputQuoteActionField > pInputQuoteAction, int nRequestID) {
		return ReqQuoteAction(Pointer.getPeer(pInputQuoteAction), nRequestID);
	}
	@Virtual(27) 
	protected native int ReqQuoteAction(@Ptr long pInputQuoteAction, int nRequestID);
	
	/**
	 * ///申请组合录入请求
	 */
	@Virtual(28) 
	public int ReqCombActionInsert(Pointer<CThostFtdcInputCombActionField > pInputCombAction, int nRequestID) {
		return ReqCombActionInsert(Pointer.getPeer(pInputCombAction), nRequestID);
	}
	@Virtual(28) 
	protected native int ReqCombActionInsert(@Ptr long pInputCombAction, int nRequestID);
	
	/**
	 * ///请求查询报单
	 */
	@Virtual(29) 
	public int ReqQryOrder(Pointer<CThostFtdcQryOrderField > pQryOrder, int nRequestID) {
		return ReqQryOrder(Pointer.getPeer(pQryOrder), nRequestID);
	}
	@Virtual(29) 
	protected native int ReqQryOrder(@Ptr long pQryOrder, int nRequestID);
	
	/**
	 * ///请求查询成交
	 */
	@Virtual(30) 
	public int ReqQryTrade(Pointer<CThostFtdcQryTradeField > pQryTrade, int nRequestID) {
		return ReqQryTrade(Pointer.getPeer(pQryTrade), nRequestID);
	}
	@Virtual(30) 
	protected native int ReqQryTrade(@Ptr long pQryTrade, int nRequestID);
	
	/**
	 * ///请求查询投资者持仓
	 */
	@Virtual(31) 
	public int ReqQryInvestorPosition(Pointer<CThostFtdcQryInvestorPositionField > pQryInvestorPosition, int nRequestID) {
		return ReqQryInvestorPosition(Pointer.getPeer(pQryInvestorPosition), nRequestID);
	}
	@Virtual(31) 
	protected native int ReqQryInvestorPosition(@Ptr long pQryInvestorPosition, int nRequestID);
	
	/**
	 * ///请求查询资金账户
	 */
	@Virtual(32) 
	public int ReqQryTradingAccount(Pointer<CThostFtdcQryTradingAccountField > pQryTradingAccount, int nRequestID) {
		return ReqQryTradingAccount(Pointer.getPeer(pQryTradingAccount), nRequestID);
	}
	@Virtual(32) 
	protected native int ReqQryTradingAccount(@Ptr long pQryTradingAccount, int nRequestID);
	
	/**
	 * ///请求查询投资者
	 */
	@Virtual(33) 
	public int ReqQryInvestor(Pointer<CThostFtdcQryInvestorField > pQryInvestor, int nRequestID) {
		return ReqQryInvestor(Pointer.getPeer(pQryInvestor), nRequestID);
	}
	@Virtual(33) 
	protected native int ReqQryInvestor(@Ptr long pQryInvestor, int nRequestID);
	
	/**
	 * ///请求查询交易编码
	 */
	@Virtual(34) 
	public int ReqQryTradingCode(Pointer<CThostFtdcQryTradingCodeField > pQryTradingCode, int nRequestID) {
		return ReqQryTradingCode(Pointer.getPeer(pQryTradingCode), nRequestID);
	}
	@Virtual(34) 
	protected native int ReqQryTradingCode(@Ptr long pQryTradingCode, int nRequestID);
	
	/**
	 * ///请求查询合约保证金率
	 */
	@Virtual(35) 
	public int ReqQryInstrumentMarginRate(Pointer<CThostFtdcQryInstrumentMarginRateField > pQryInstrumentMarginRate, int nRequestID) {
		return ReqQryInstrumentMarginRate(Pointer.getPeer(pQryInstrumentMarginRate), nRequestID);
	}
	@Virtual(35) 
	protected native int ReqQryInstrumentMarginRate(@Ptr long pQryInstrumentMarginRate, int nRequestID);
	
	/**
	 * ///请求查询合约手续费率
	 */
	@Virtual(36) 
	public int ReqQryInstrumentCommissionRate(Pointer<CThostFtdcQryInstrumentCommissionRateField > pQryInstrumentCommissionRate, int nRequestID) {
		return ReqQryInstrumentCommissionRate(Pointer.getPeer(pQryInstrumentCommissionRate), nRequestID);
	}
	@Virtual(36) 
	protected native int ReqQryInstrumentCommissionRate(@Ptr long pQryInstrumentCommissionRate, int nRequestID);
	
	/**
	 * ///请求查询交易所
	 */
	@Virtual(37) 
	public int ReqQryExchange(Pointer<CThostFtdcQryExchangeField > pQryExchange, int nRequestID) {
		return ReqQryExchange(Pointer.getPeer(pQryExchange), nRequestID);
	}
	@Virtual(37) 
	protected native int ReqQryExchange(@Ptr long pQryExchange, int nRequestID);
	
	/**
	 * ///请求查询产品
	 */
	@Virtual(38) 
	public int ReqQryProduct(Pointer<CThostFtdcQryProductField > pQryProduct, int nRequestID) {
		return ReqQryProduct(Pointer.getPeer(pQryProduct), nRequestID);
	}
	@Virtual(38) 
	protected native int ReqQryProduct(@Ptr long pQryProduct, int nRequestID);
	
	/**
	 * ///请求查询合约
	 */
	@Virtual(39) 
	public int ReqQryInstrument(Pointer<CThostFtdcQryInstrumentField > pQryInstrument, int nRequestID) {
		return ReqQryInstrument(Pointer.getPeer(pQryInstrument), nRequestID);
	}
	@Virtual(39) 
	protected native int ReqQryInstrument(@Ptr long pQryInstrument, int nRequestID);
	
	/**
	 * ///请求查询行情
	 */
	@Virtual(40) 
	public int ReqQryDepthMarketData(Pointer<CThostFtdcQryDepthMarketDataField > pQryDepthMarketData, int nRequestID) {
		return ReqQryDepthMarketData(Pointer.getPeer(pQryDepthMarketData), nRequestID);
	}
	@Virtual(40) 
	protected native int ReqQryDepthMarketData(@Ptr long pQryDepthMarketData, int nRequestID);
	
	/**
	 * ///请求查询投资者结算结果
	 */
	@Virtual(41) 
	public int ReqQrySettlementInfo(Pointer<CThostFtdcQrySettlementInfoField > pQrySettlementInfo, int nRequestID) {
		return ReqQrySettlementInfo(Pointer.getPeer(pQrySettlementInfo), nRequestID);
	}
	@Virtual(41) 
	protected native int ReqQrySettlementInfo(@Ptr long pQrySettlementInfo, int nRequestID);
	
	/**
	 * ///请求查询转帐银行
	 */
	@Virtual(42) 
	public int ReqQryTransferBank(Pointer<CThostFtdcQryTransferBankField > pQryTransferBank, int nRequestID) {
		return ReqQryTransferBank(Pointer.getPeer(pQryTransferBank), nRequestID);
	}
	@Virtual(42) 
	protected native int ReqQryTransferBank(@Ptr long pQryTransferBank, int nRequestID);
	
	/**
	 * ///请求查询投资者持仓明细
	 */
	@Virtual(43) 
	public int ReqQryInvestorPositionDetail(Pointer<CThostFtdcQryInvestorPositionDetailField > pQryInvestorPositionDetail, int nRequestID) {
		return ReqQryInvestorPositionDetail(Pointer.getPeer(pQryInvestorPositionDetail), nRequestID);
	}
	@Virtual(43) 
	protected native int ReqQryInvestorPositionDetail(@Ptr long pQryInvestorPositionDetail, int nRequestID);
	
	/**
	 * ///请求查询客户通知
	 */
	@Virtual(44) 
	public int ReqQryNotice(Pointer<CThostFtdcQryNoticeField > pQryNotice, int nRequestID) {
		return ReqQryNotice(Pointer.getPeer(pQryNotice), nRequestID);
	}
	@Virtual(44) 
	protected native int ReqQryNotice(@Ptr long pQryNotice, int nRequestID);
	
	/**
	 * ///请求查询结算信息确认
	 */
	@Virtual(45) 
	public int ReqQrySettlementInfoConfirm(Pointer<CThostFtdcQrySettlementInfoConfirmField > pQrySettlementInfoConfirm, int nRequestID) {
		return ReqQrySettlementInfoConfirm(Pointer.getPeer(pQrySettlementInfoConfirm), nRequestID);
	}
	@Virtual(45) 
	protected native int ReqQrySettlementInfoConfirm(@Ptr long pQrySettlementInfoConfirm, int nRequestID);
	
	/**
	 * ///请求查询投资者持仓明细
	 */
	@Virtual(46) 
	public int ReqQryInvestorPositionCombineDetail(Pointer<CThostFtdcQryInvestorPositionCombineDetailField > pQryInvestorPositionCombineDetail, int nRequestID) {
		return ReqQryInvestorPositionCombineDetail(Pointer.getPeer(pQryInvestorPositionCombineDetail), nRequestID);
	}
	@Virtual(46) 
	protected native int ReqQryInvestorPositionCombineDetail(@Ptr long pQryInvestorPositionCombineDetail, int nRequestID);
	
	/**
	 * ///请求查询保证金监管系统经纪公司资金账户密钥
	 */
	@Virtual(47) 
	public int ReqQryCFMMCTradingAccountKey(Pointer<CThostFtdcQryCFMMCTradingAccountKeyField > pQryCFMMCTradingAccountKey, int nRequestID) {
		return ReqQryCFMMCTradingAccountKey(Pointer.getPeer(pQryCFMMCTradingAccountKey), nRequestID);
	}
	@Virtual(47) 
	protected native int ReqQryCFMMCTradingAccountKey(@Ptr long pQryCFMMCTradingAccountKey, int nRequestID);
	
	/**
	 * ///请求查询仓单折抵信息
	 */
	@Virtual(48) 
	public int ReqQryEWarrantOffset(Pointer<CThostFtdcQryEWarrantOffsetField > pQryEWarrantOffset, int nRequestID) {
		return ReqQryEWarrantOffset(Pointer.getPeer(pQryEWarrantOffset), nRequestID);
	}
	@Virtual(48) 
	protected native int ReqQryEWarrantOffset(@Ptr long pQryEWarrantOffset, int nRequestID);
	
	/**
	 * ///请求查询投资者品种/跨品种保证金
	 */
	@Virtual(49) 
	public int ReqQryInvestorProductGroupMargin(Pointer<CThostFtdcQryInvestorProductGroupMarginField > pQryInvestorProductGroupMargin, int nRequestID) {
		return ReqQryInvestorProductGroupMargin(Pointer.getPeer(pQryInvestorProductGroupMargin), nRequestID);
	}
	@Virtual(49) 
	protected native int ReqQryInvestorProductGroupMargin(@Ptr long pQryInvestorProductGroupMargin, int nRequestID);
	
	/**
	 * ///请求查询交易所保证金率
	 */
	@Virtual(50) 
	public int ReqQryExchangeMarginRate(Pointer<CThostFtdcQryExchangeMarginRateField > pQryExchangeMarginRate, int nRequestID) {
		return ReqQryExchangeMarginRate(Pointer.getPeer(pQryExchangeMarginRate), nRequestID);
	}
	@Virtual(50) 
	protected native int ReqQryExchangeMarginRate(@Ptr long pQryExchangeMarginRate, int nRequestID);
	
	/**
	 * ///请求查询交易所调整保证金率
	 */
	@Virtual(51) 
	public int ReqQryExchangeMarginRateAdjust(Pointer<CThostFtdcQryExchangeMarginRateAdjustField > pQryExchangeMarginRateAdjust, int nRequestID) {
		return ReqQryExchangeMarginRateAdjust(Pointer.getPeer(pQryExchangeMarginRateAdjust), nRequestID);
	}
	@Virtual(51) 
	protected native int ReqQryExchangeMarginRateAdjust(@Ptr long pQryExchangeMarginRateAdjust, int nRequestID);
	
	/**
	 * ///请求查询汇率
	 */
	@Virtual(52) 
	public int ReqQryExchangeRate(Pointer<CThostFtdcQryExchangeRateField > pQryExchangeRate, int nRequestID) {
		return ReqQryExchangeRate(Pointer.getPeer(pQryExchangeRate), nRequestID);
	}
	@Virtual(52) 
	protected native int ReqQryExchangeRate(@Ptr long pQryExchangeRate, int nRequestID);
	
	/**
	 * ///请求查询二级代理操作员银期权限
	 */
	@Virtual(53) 
	public int ReqQrySecAgentACIDMap(Pointer<CThostFtdcQrySecAgentACIDMapField > pQrySecAgentACIDMap, int nRequestID) {
		return ReqQrySecAgentACIDMap(Pointer.getPeer(pQrySecAgentACIDMap), nRequestID);
	}
	@Virtual(53) 
	protected native int ReqQrySecAgentACIDMap(@Ptr long pQrySecAgentACIDMap, int nRequestID);
	
	/**
	 * ///请求查询产品报价汇率
	 */
	@Virtual(54) 
	public int ReqQryProductExchRate(Pointer<CThostFtdcQryProductExchRateField > pQryProductExchRate, int nRequestID) {
		return ReqQryProductExchRate(Pointer.getPeer(pQryProductExchRate), nRequestID);
	}
	@Virtual(54) 
	protected native int ReqQryProductExchRate(@Ptr long pQryProductExchRate, int nRequestID);
	
	/**
	 * ///请求查询期权交易成本
	 */
	@Virtual(55) 
	public int ReqQryOptionInstrTradeCost(Pointer<CThostFtdcQryOptionInstrTradeCostField > pQryOptionInstrTradeCost, int nRequestID) {
		return ReqQryOptionInstrTradeCost(Pointer.getPeer(pQryOptionInstrTradeCost), nRequestID);
	}
	@Virtual(55) 
	protected native int ReqQryOptionInstrTradeCost(@Ptr long pQryOptionInstrTradeCost, int nRequestID);
	
	/**
	 * ///请求查询期权合约手续费
	 */
	@Virtual(56) 
	public int ReqQryOptionInstrCommRate(Pointer<CThostFtdcQryOptionInstrCommRateField > pQryOptionInstrCommRate, int nRequestID) {
		return ReqQryOptionInstrCommRate(Pointer.getPeer(pQryOptionInstrCommRate), nRequestID);
	}
	@Virtual(56) 
	protected native int ReqQryOptionInstrCommRate(@Ptr long pQryOptionInstrCommRate, int nRequestID);
	
	/**
	 * ///请求查询执行宣告
	 */
	@Virtual(57) 
	public int ReqQryExecOrder(Pointer<CThostFtdcQryExecOrderField > pQryExecOrder, int nRequestID) {
		return ReqQryExecOrder(Pointer.getPeer(pQryExecOrder), nRequestID);
	}
	@Virtual(57) 
	protected native int ReqQryExecOrder(@Ptr long pQryExecOrder, int nRequestID);
	
	/**
	 * ///请求查询询价
	 */
	@Virtual(58) 
	public int ReqQryForQuote(Pointer<CThostFtdcQryForQuoteField > pQryForQuote, int nRequestID) {
		return ReqQryForQuote(Pointer.getPeer(pQryForQuote), nRequestID);
	}
	@Virtual(58) 
	protected native int ReqQryForQuote(@Ptr long pQryForQuote, int nRequestID);
	
	/**
	 * ///请求查询报价
	 */
	@Virtual(59) 
	public int ReqQryQuote(Pointer<CThostFtdcQryQuoteField > pQryQuote, int nRequestID) {
		return ReqQryQuote(Pointer.getPeer(pQryQuote), nRequestID);
	}
	@Virtual(59) 
	protected native int ReqQryQuote(@Ptr long pQryQuote, int nRequestID);
	
	/**
	 * ///请求查询组合合约安全系数
	 */
	@Virtual(60) 
	public int ReqQryCombInstrumentGuard(Pointer<CThostFtdcQryCombInstrumentGuardField > pQryCombInstrumentGuard, int nRequestID) {
		return ReqQryCombInstrumentGuard(Pointer.getPeer(pQryCombInstrumentGuard), nRequestID);
	}
	@Virtual(60) 
	protected native int ReqQryCombInstrumentGuard(@Ptr long pQryCombInstrumentGuard, int nRequestID);
	
	/**
	 * ///请求查询申请组合
	 */
	@Virtual(61) 
	public int ReqQryCombAction(Pointer<CThostFtdcQryCombActionField > pQryCombAction, int nRequestID) {
		return ReqQryCombAction(Pointer.getPeer(pQryCombAction), nRequestID);
	}
	@Virtual(61) 
	protected native int ReqQryCombAction(@Ptr long pQryCombAction, int nRequestID);
	
	/**
	 * ///请求查询转帐流水
	 */
	@Virtual(62) 
	public int ReqQryTransferSerial(Pointer<CThostFtdcQryTransferSerialField > pQryTransferSerial, int nRequestID) {
		return ReqQryTransferSerial(Pointer.getPeer(pQryTransferSerial), nRequestID);
	}
	@Virtual(62) 
	protected native int ReqQryTransferSerial(@Ptr long pQryTransferSerial, int nRequestID);
	
	/**
	 * ///请求查询银期签约关系
	 */
	@Virtual(63) 
	public int ReqQryAccountregister(Pointer<CThostFtdcQryAccountregisterField > pQryAccountregister, int nRequestID) {
		return ReqQryAccountregister(Pointer.getPeer(pQryAccountregister), nRequestID);
	}
	@Virtual(63) 
	protected native int ReqQryAccountregister(@Ptr long pQryAccountregister, int nRequestID);
	
	/**
	 * ///请求查询签约银行
	 */
	@Virtual(64) 
	public int ReqQryContractBank(Pointer<CThostFtdcQryContractBankField > pQryContractBank, int nRequestID) {
		return ReqQryContractBank(Pointer.getPeer(pQryContractBank), nRequestID);
	}
	@Virtual(64) 
	protected native int ReqQryContractBank(@Ptr long pQryContractBank, int nRequestID);
	
	/**
	 * ///请求查询预埋单
	 */
	@Virtual(65) 
	public int ReqQryParkedOrder(Pointer<CThostFtdcQryParkedOrderField > pQryParkedOrder, int nRequestID) {
		return ReqQryParkedOrder(Pointer.getPeer(pQryParkedOrder), nRequestID);
	}
	@Virtual(65) 
	protected native int ReqQryParkedOrder(@Ptr long pQryParkedOrder, int nRequestID);
	
	/**
	 * ///请求查询预埋撤单
	 */
	@Virtual(66) 
	public int ReqQryParkedOrderAction(Pointer<CThostFtdcQryParkedOrderActionField > pQryParkedOrderAction, int nRequestID) {
		return ReqQryParkedOrderAction(Pointer.getPeer(pQryParkedOrderAction), nRequestID);
	}
	@Virtual(66) 
	protected native int ReqQryParkedOrderAction(@Ptr long pQryParkedOrderAction, int nRequestID);
	
	/**
	 * ///请求查询交易通知
	 */
	@Virtual(67) 
	public int ReqQryTradingNotice(Pointer<CThostFtdcQryTradingNoticeField > pQryTradingNotice, int nRequestID) {
		return ReqQryTradingNotice(Pointer.getPeer(pQryTradingNotice), nRequestID);
	}
	@Virtual(67) 
	protected native int ReqQryTradingNotice(@Ptr long pQryTradingNotice, int nRequestID);
	
	/**
	 * ///请求查询经纪公司交易参数
	 */
	@Virtual(68) 
	public int ReqQryBrokerTradingParams(Pointer<CThostFtdcQryBrokerTradingParamsField > pQryBrokerTradingParams, int nRequestID) {
		return ReqQryBrokerTradingParams(Pointer.getPeer(pQryBrokerTradingParams), nRequestID);
	}
	@Virtual(68) 
	protected native int ReqQryBrokerTradingParams(@Ptr long pQryBrokerTradingParams, int nRequestID);
	
	/**
	 * ///请求查询经纪公司交易算法
	 */
	@Virtual(69) 
	public int ReqQryBrokerTradingAlgos(Pointer<CThostFtdcQryBrokerTradingAlgosField > pQryBrokerTradingAlgos, int nRequestID) {
		return ReqQryBrokerTradingAlgos(Pointer.getPeer(pQryBrokerTradingAlgos), nRequestID);
	}
	@Virtual(69) 
	protected native int ReqQryBrokerTradingAlgos(@Ptr long pQryBrokerTradingAlgos, int nRequestID);
	
	/**
	 * ///请求查询监控中心用户令牌
	 */
	@Virtual(70) 
	public int ReqQueryCFMMCTradingAccountToken(Pointer<CThostFtdcQueryCFMMCTradingAccountTokenField > pQueryCFMMCTradingAccountToken, int nRequestID) {
		return ReqQueryCFMMCTradingAccountToken(Pointer.getPeer(pQueryCFMMCTradingAccountToken), nRequestID);
	}
	@Virtual(70) 
	protected native int ReqQueryCFMMCTradingAccountToken(@Ptr long pQueryCFMMCTradingAccountToken, int nRequestID);
	
	/**
	 * ///期货发起银行资金转期货请求
	 */
	@Virtual(71) 
	public int ReqFromBankToFutureByFuture(Pointer<CThostFtdcReqTransferField > pReqTransfer, int nRequestID) {
		return ReqFromBankToFutureByFuture(Pointer.getPeer(pReqTransfer), nRequestID);
	}
	@Virtual(71) 
	protected native int ReqFromBankToFutureByFuture(@Ptr long pReqTransfer, int nRequestID);
	
	/**
	 * ///期货发起期货资金转银行请求
	 */
	@Virtual(72) 
	public int ReqFromFutureToBankByFuture(Pointer<CThostFtdcReqTransferField > pReqTransfer, int nRequestID) {
		return ReqFromFutureToBankByFuture(Pointer.getPeer(pReqTransfer), nRequestID);
	}
	@Virtual(72) 
	protected native int ReqFromFutureToBankByFuture(@Ptr long pReqTransfer, int nRequestID);
	
	/**
	 * ///期货发起查询银行余额请求
	 */
	@Virtual(73) 
	public int ReqQueryBankAccountMoneyByFuture(Pointer<CThostFtdcReqQueryAccountField > pReqQueryAccount, int nRequestID) {
		return ReqQueryBankAccountMoneyByFuture(Pointer.getPeer(pReqQueryAccount), nRequestID);
	}
	@Virtual(73) 
	protected native int ReqQueryBankAccountMoneyByFuture(@Ptr long pReqQueryAccount, int nRequestID);
	
	
	public CThostFtdcTraderApi() {
		super();
	}
	public CThostFtdcTraderApi(Pointer pointer) {
		super(pointer);
	}
}
